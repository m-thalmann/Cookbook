openapi: 3.0.0
info:
  title: Cookbook
  version: '1.0'
  contact:
    url: 'https://github.com/m-thalmann/Cookbook'
    email: matthiasthalmann1@hotmail.de
    name: Matthias Thalmann
  description: The API for the Cookbook-Webapp
  license:
    name: MIT
servers:
  - url: 'http://localhost:80'
    description: Dev
  - url: 'http://localhost:80/api'
    description: Dev /api
tags:
  - name: User
  - name: Recipe
  - name: Ingredient
  - name: RecipeImage
  - name: Category
  - name: Admin
paths:
  /auth:
    get:
      summary: Returns whether the user is authenticated or not
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  info:
                    type: string
                    example: Authorized
                required:
                  - user
                  - info
        '401':
          $ref: '#/components/responses/Unauthorized'
      operationId: get-auth
      description: Returns whether the user is authenticated or not
      security:
        - Token: []
        - QueryToken: []
    put:
      summary: Update the authenticated user
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                name:
                  type: string
                password:
                  type: string
                oldPassword:
                  type: string
              required:
                - oldPassword
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Old password is wrong
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: Old password is wrong
                required:
                  - info
        '409':
          description: A user with this email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: A user with this email already exists
                required:
                  - info
      operationId: put-auth
      description: Update the authenticated user
      security:
        - Token: []
        - QueryToken: []
    delete:
      summary: Deletes the authenticated user
      tags:
        - User
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Something went wrong
      operationId: delete-auth
      description: Deletes the authenticated user and all of its data
      security:
        - Token: []
        - QueryToken: []
  /auth/login:
    post:
      summary: Authenticates the user and returns a token
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  info:
                    type: string
                    example: Authorized
                  token:
                    $ref: '#/components/schemas/JwtToken'
                required:
                  - user
                  - info
                  - token
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: Email and password expected
                required:
                  - info
        '403':
          description: Email not verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: Email not verified
                required:
                  - info
        '404':
          description: Email or password wrong
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: Email or password wrong
                required:
                  - info
      operationId: post-auth-login
      description: Authenticates the user and returns a token
  /auth/register:
    post:
      summary: Registers a new user
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                name:
                  type: string
                  maxLength: 20
                password:
                  type: string
                hcaptchaToken:
                  type: string
                  description: The token received from a successfully solved hCaptcha (if enabled)
              required:
                - email
                - name
                - password
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  info:
                    type: string
                    example: Authorized
                required:
                  - user
                  - info
        '400':
          $ref: '#/components/responses/ValidationError'
        '403':
          description: The hcaptchaToken was invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: hCaptcha-Token invalid
        '405':
          description: Registration is disabled
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: Registration is disabled
                required:
                  - info
        '409':
          description: A user with this email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: A user with this email already exists
                required:
                  - info
      operationId: post-auth-register
      description: Registers a new user
  /auth/verifyEmail:
    post:
      summary: Verify an email
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                code:
                  type: string
                  minLength: 5
                  maxLength: 5
                  example: 53012
              required:
                - email
                - code
      responses:
        '200':
          description: OK (also if email does not exist or already verified)
        '400':
          description: Email and code expected
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: Email and code expected
                required:
                  - info
        '403':
          description: Verification code is wrong or has expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: Verification code is wrong or has expired
                required:
                  - info
      operationId: post-auth-verifyEmail
      description: Verify an email
  /auth/verifyEmail/resend:
    post:
      summary: Resend an verification-email
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        '200':
          description: OK (also if email does not exist or already verified)
        '400':
          description: Email expected
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: Email and code expected
                required:
                  - info
      operationId: post-auth-verifyEmail
      description: Verify an email
  /auth/registrationEnabled:
    get:
      summary: Returns whether the registration is enabled
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
      operationId: get-auth-registrationEnabled
      description: Returns whether the registration is enabled
  /auth/resetPassword:
    post:
      summary: Reset a users password
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                token:
                  type: string
                  minLength: 32
                  maxLength: 32
                password:
                  type: string
                  description: The new password
              required:
                - email
                - token
                - password
      responses:
        '200':
          description: OK
        '400':
          description: Email, token and password expected
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: Email, token and password expected
                required:
                  - info
        '404':
          description: Combination of email and token not found
      operationId: post-auth-resetPassword
      description: Reset a users password
  /auth/resetPassword/send:
    post:
      summary: Sends a reset-password email
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        '200':
          description: OK (also if the email does not exist)
        '400':
          description: Email expected
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: Email expected
                required:
                  - info
      operationId: post-auth-resetPassword-send
      description: Sends a reset-password email to the given email if it exists in the database
  /recipes:
    get:
      summary: Return all visible recipes for the user
      tags:
        - Recipe
      parameters:
        - $ref: '#/components/parameters/ItemsPerPage'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/SortDir'
      responses:
        '200':
          description: OK
          headers:
            X-Logout:
              $ref: '#/components/headers/xLogout'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Recipe'
                    required:
                      - items
      operationId: get-recipes
      description: Return all visible recipes for the user, or only public recipes if no authentication is provided
      security:
        - Token: []
        - QueryToken: []
    post:
      summary: Create a new recipe
      tags:
        - Recipe
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                public:
                  type: boolean
                  description: Whether the recipe is publicly visible or not
                name:
                  type: string
                  maxLength: 20
                  example: Chocolate Cake
                description:
                  type: string
                  nullable: true
                category:
                  type: string
                  maxLength: 10
                  nullable: true
                  example: Dessert
                portions:
                  type: integer
                  nullable: true
                  minimum: 1
                difficulty:
                  type: integer
                  nullable: true
                  minimum: 0
                  maximum: 4
                preparation:
                  type: string
                  nullable: true
                  description: Descriptive explanation of the preparation-steps (in HTML format)
                preparationTime:
                  type: number
                  nullable: true
                  minimum: 1
                  description: Preparation time in minutes
                restTime:
                  type: integer
                  nullable: true
                  minimum: 1
                  description: Rest time in minutes
                cookTime:
                  type: number
                  nullable: true
                  minimum: 1
                  description: Cooking/baking time in minutes
                ingredients:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        maxLength: 20
                        example: Flour
                      unit:
                        type: string
                        maxLength: 10
                        nullable: true
                        example: 'g'
                        description: The unit used to measure this ingredient
                      amount:
                        type: number
                        minimum: 0
                        exclusiveMinimum: true
                        nullable: true
                        example: 100
                    required:
                      - name
                      - unit
                      - amount
              required:
                - public
                - name
                - description
                - category
                - portions
                - difficulty
                - preparation
                - preparationTime
                - restTime
                - cookTime
                - ingredients
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeFull'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Duplicate ingredient name
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: An ingredient with this name already exists for this recipe
                required:
                  - info
      operationId: post-recipes
      description: Create a new recipe
      security:
        - Token: []
        - QueryToken: []
  /recipes/id/{id}:
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Returns the recipe with the given id
      tags:
        - Recipe
      responses:
        '200':
          description: OK
          headers:
            X-Logout:
              $ref: '#/components/headers/xLogout'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeFull'
        '404':
          description: Recipe not found or not visible for the user
          headers:
            X-Logout:
              $ref: '#/components/headers/xLogout'
      operationId: get-recipes-id
      description: Returns the recipe with the given id, if it is visible to the user
      security:
        - Token: []
        - QueryToken: []
    put:
      summary: Update an existing recipe
      tags:
        - Recipe
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                public:
                  type: boolean
                  description: Whether the recipe is publicly visible or not
                name:
                  type: string
                  maxLength: 20
                  example: Chocolate Cake
                description:
                  type: string
                  nullable: true
                category:
                  type: string
                  maxLength: 10
                  nullable: true
                  example: Dessert
                portions:
                  type: integer
                  nullable: true
                  minimum: 1
                difficulty:
                  type: integer
                  nullable: true
                  minimum: 0
                  maximum: 4
                preparation:
                  type: string
                  nullable: true
                  description: Descriptive explanation of the preparation-steps (in HTML format)
                preparationTime:
                  type: number
                  nullable: true
                  minimum: 1
                  description: Preparation time in minutes
                restTime:
                  type: integer
                  nullable: true
                  minimum: 1
                  description: Rest time in minutes
                cookTime:
                  type: number
                  nullable: true
                  minimum: 1
                  description: Cooking/baking time in minutes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeFull'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Can't change ownership of recipe
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: You can't change ownership
                required:
                  - info
        '404':
          description: Recipe not found
      operationId: put-recipes-id
      description: Update an existing recipe
      security:
        - Token: []
        - QueryToken: []
    delete:
      summary: Delete an existing recipe
      tags:
        - Recipe
      responses:
        '200':
          description: OK (also if not deleted due to not found or not owned by user)
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Something went wrong
      operationId: delete-recipes-id
      description: Delete an existing recipe
      security:
        - Token: []
        - QueryToken: []
  /recipes/search/{search}:
    parameters:
      - schema:
          type: string
        name: search
        in: path
        required: true
    get:
      summary: Search for a recipe
      tags:
        - Recipe
      parameters:
        - $ref: '#/components/parameters/ItemsPerPage'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/SortDir'
      responses:
        '200':
          description: OK
          headers:
            X-Logout:
              $ref: '#/components/headers/xLogout'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Recipe'
                    required:
                      - items
      operationId: get-recipes-search
      description: Search for a recipe in the name and description
      security:
        - Token: []
        - QueryToken: []
  /recipes/category/{category}:
    parameters:
      - schema:
          type: string
        name: category
        in: path
        required: true
        description: The name of the category (case-insensitive)
    get:
      summary: Return all recipes for a category
      tags:
        - Recipe
      parameters:
        - $ref: '#/components/parameters/ItemsPerPage'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/SortDir'
      responses:
        '200':
          description: OK
          headers:
            X-Logout:
              $ref: '#/components/headers/xLogout'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Recipe'
                    required:
                      - items
      operationId: get-recipes-category
      description: Return all recipes for a category
      security:
        - Token: []
        - QueryToken: []
  /users/id/{id}/recipes:
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Return all recipes for a user
      tags:
        - Recipe
      parameters:
        - $ref: '#/components/parameters/ItemsPerPage'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/SortDir'
      responses:
        '200':
          description: OK
          headers:
            X-Logout:
              $ref: '#/components/headers/xLogout'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Recipe'
                    required:
                      - items
      operationId: get-users-id-recipes
      description: Return all recipes for a user (that are visible to the authenticated user)
      security:
        - Token: []
        - QueryToken: []
  /recipes/id/{id}/ingredients:
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    post:
      summary: Add a new ingredient to a recipe
      tags:
        - Ingredient
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 20
                  example: Flour
                unit:
                  type: string
                  maxLength: 10
                  nullable: true
                  example: 'g'
                  description: The unit used to measure this ingredient
                amount:
                  type: number
                  minimum: 0
                  exclusiveMinimum: true
                  nullable: true
                  example: 100
              required:
                - name
                - unit
                - amount
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Recipe not found or not owned by user
        '409':
          description: Duplicate ingredient name in recipe
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: An ingredient with this name already exists for this recipe
                required:
                  - info
      operationId: post-recipes-id-ingredients
      description: Add a new ingredient to a recipe
      security:
        - Token: []
        - QueryToken: []
  /ingredients/list:
    get:
      summary: Get all distinct ingredients for recipes the user owns
      tags:
        - Ingredient
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Sugar
                    unit:
                      type: string
                      nullable: true
                      example: g
                  required:
                    - name
                    - unit
        '401':
          $ref: '#/components/responses/Unauthorized'
      operationId: get-ingredients-list
      description: Get all distinct ingredients for recipes the user owns
      security:
        - Token: []
        - QueryToken: []
  /ingredients/id/{id}:
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    put:
      summary: Update a specific ingredient
      tags:
        - Ingredient
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 20
                  example: Flour
                unit:
                  type: string
                  maxLength: 10
                  nullable: true
                  example: 'g'
                  description: The unit used to measure this ingredient
                amount:
                  type: number
                  minimum: 0
                  exclusiveMinimum: true
                  nullable: true
                  example: 100
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Not found
      operationId: put-ingredients-id
      description: Update a specific ingredient
      security:
        - Token: []
        - QueryToken: []
    delete:
      summary: Delete a specific ingredient
      tags:
        - Ingredient
      responses:
        '200':
          description: OK (also if not deleted due to not found or not owned by user)
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Something went wrong
      operationId: delete-ingredients-id
      description: Delete a specific ingredient
      security:
        - Token: []
        - QueryToken: []
  /recipes/id/{id}/images/count:
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Return the amount of available images for this recipe
      tags:
        - RecipeImage
      responses:
        '200':
          description: OK
          headers:
            X-Logout:
              $ref: '#/components/headers/xLogout'
          content:
            application/json:
              schema:
                type: integer
                minimum: 0
      operationId: get-recipes-id-images-count
      description: Return the amount of available images for this recipe
      security:
        - Token: []
        - QueryToken: []
  /recipes/id/{id}/images/number/{number}:
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
      - schema:
          type: integer
          minimum: 0
        name: number
        in: path
        required: true
        description: The number of the image
    get:
      summary: Return a single image for this recipe
      tags:
        - RecipeImage
      parameters:
        - $ref: '#/components/parameters/MaxSize'
      responses:
        '200':
          description: OK
          headers:
            X-Logout:
              $ref: '#/components/headers/xLogout'
          content:
            image/*:
              schema:
                type: string
                format: binary
        '304':
          description: Not modified (if cached using the E-Tag)
          headers:
            X-Logout:
              $ref: '#/components/headers/xLogout'
        '404':
          description: Not found
          headers:
            X-Logout:
              $ref: '#/components/headers/xLogout'
      operationId: get-recipes-id-images-number
      description: Return a single image for this recipe with the given number
      security:
        - Token: []
        - QueryToken: []
  /recipes/id/{id}/images:
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Return all recipe-images for this recipe
      tags:
        - RecipeImage
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeImage'
        '401':
          $ref: '#/components/responses/Unauthorized'
      operationId: get-recipes-id-images
      description: Return all recipe-images for this recipe (the client has to own it)
      security:
        - Token: []
        - QueryToken: []
    post:
      summary: Add a new recipe-image to a recipe
      tags:
        - RecipeImage
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeImage'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: No file
                required:
                  - info
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Recipe not found
        '409':
          description: An identical image already exists for this recipe
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: The same image already exists for this recipe
                required:
                  - info
      operationId: post-recipes-id-images
      description: Add a new recipe-image to a recipe
      security:
        - Token: []
        - QueryToken: []
  /recipeImages/id/{id}:
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Get a specific recipe-image
      tags:
        - RecipeImage
      parameters:
        - $ref: '#/components/parameters/MaxSize'
      responses:
        '200':
          description: OK
          headers:
            X-Logout:
              $ref: '#/components/headers/xLogout'
          content:
            image/*:
              schema:
                type: string
                format: binary
        '304':
          description: Not modified (if cached using the E-Tag)
          headers:
            X-Logout:
              $ref: '#/components/headers/xLogout'
        '404':
          description: Not found
          headers:
            X-Logout:
              $ref: '#/components/headers/xLogout'
      operationId: get-recipeImages-id
      description: Get a specific recipe-image
      security:
        - Token: []
        - QueryToken: []
    delete:
      summary: Delete a specific recipe-image
      tags:
        - RecipeImage
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Not found
      operationId: delete-recipeImages-id
      description: Delete a specific recipe-image
      security:
        - Token: []
        - QueryToken: []
  /categories:
    get:
      summary: Return all available categories
      tags:
        - Category
      responses:
        '200':
          description: OK
          headers:
            X-Logout:
              $ref: '#/components/headers/xLogout'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 'Cakes'
                uniqueItems: true
      operationId: get-categories
      description: Return all available categories
      security:
        - Token: []
        - QueryToken: []
  /admin/users:
    get:
      summary: Returns all users
      tags:
        - Admin
      parameters:
        - schema:
            type: string
          name: search
          in: query
          required: false
          description: Search by name and email
        - $ref: '#/components/parameters/ItemsPerPage'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/SortDir'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserFull'
                    required:
                      - items
        '401':
          $ref: '#/components/responses/Unauthorized'
      operationId: get-admin-users
      description: Returns all users
      security:
        - Token: []
        - QueryToken: []
    post:
      summary: Create a new user
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                name:
                  type: string
                  maxLength: 20
                password:
                  type: string
                isAdmin:
                  type: boolean
                verifyEmail:
                  type: boolean
              required:
                - email
                - name
                - password
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFull'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          description: A user with this email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: A user with this email already exists
                required:
                  - info
      operationId: post-admin-users
      description: Create a new user
      security:
        - Token: []
        - QueryToken: []
  /admin/users/id/{id}:
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Get user by id
      tags:
        - Admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFull'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: User not found
      operationId: get-admin-users-id
      description: Get specific user by id
      security:
        - Token: []
        - QueryToken: []
    put:
      summary: Update a user
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                name:
                  type: string
                password:
                  type: string
                isAdmin:
                  type: boolean
                emailVerified:
                  type: boolean
                  description: Whether the email is verified or not
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFull'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: You can't update yourself
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: You can't update yourself
                required:
                  - info
        '404':
          description: User not found
        '409':
          description: A user with this email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: A user with this email already exists
                required:
                  - info
      operationId: put-admin-users-id
      description: Update a user
      security:
        - Token: []
        - QueryToken: []
    delete:
      summary: Delete a user
      tags:
        - Admin
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: You can't delete yourself
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: You can't delete yourself
                required:
                  - info
      operationId: delete-admin-users-id
      description: Delete a user
      security:
        - Token: []
        - QueryToken: []
  /admin/users/id/{id}/resetPassword:
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    post:
      summary: Reset a users password
      tags:
        - Admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/UserFull'
                  password:
                    type: string
                required:
                  - user
                  - password
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: User not found
      operationId: post-admin-users-id-resetPassword
      description: Reset a users password
      security:
        - Token: []
        - QueryToken: []
  /admin/recipes:
    get:
      summary: Returns all recipes
      tags:
        - Admin
      parameters:
        - schema:
            type: string
          name: search
          in: query
          required: false
          description: Search by name, description and category
        - schema:
            type: integer
          name: filterUserId
          in: query
          required: false
          description: Only retrieve recipes for the user with this id
        - $ref: '#/components/parameters/ItemsPerPage'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/SortDir'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Recipe'
                    required:
                      - items
        '401':
          $ref: '#/components/responses/Unauthorized'
      operationId: get-admin-recipes
      description: Returns all recipes
      security:
        - Token: []
        - QueryToken: []
  /admin/information:
    get:
      summary: Get server information
      tags:
        - Admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: object
                    properties:
                      unverified:
                        type: integer
                        minimum: 0
                        description: Amount of unverified users
                      admins:
                        type: integer
                        minimum: 0
                        description: Amount of admin users
                      total:
                        type: integer
                        minimum: 0
                        description: Total amount of users
                    required:
                      - unverified
                      - admins
                      - total
                  recipes:
                    type: object
                    properties:
                      private:
                        type: integer
                        minimum: 0
                        description: Amount of private recipes
                      total:
                        type: integer
                        minimum: 0
                        description: Total amount of recipes
                    required:
                      - private
                      - total
                  imagesSize:
                    type: number
                    minimum: 0
                    description: Total size of images in MB
                required:
                  - users
                  - recipes
                  - imagesSize
        '401':
          $ref: '#/components/responses/Unauthorized'
      operationId: get-admin-information
      description: Get server information
      security:
        - Token: []
        - QueryToken: []
  /admin/server/config:
    get:
      summary: Get server config
      tags:
        - Admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  root_url:
                    type: string
                  production:
                    type: boolean
                  database:
                    type: object
                    properties:
                      host:
                        type: string
                      user:
                        type: string
                      database:
                        type: string
                      charset:
                        type: string
                    required:
                      - host
                      - user
                      - database
                      - charset
                  image_store:
                    type: string
                    nullable: true
                  token:
                    type: object
                    properties:
                      ttl:
                        type: integer
                        minimum: 0
                    required:
                      - ttl
                  password:
                    type: object
                    properties:
                      reset_ttl:
                        type: integer
                        minimum: 0
                    required:
                      - reset_ttl
                  registration_enabled:
                    type: boolean
                  email_verification:
                    type: object
                    properties:
                      enabled:
                        type: boolean
                      ttl:
                        type: integer
                        minimum: 0
                    required:
                      - enabled
                      - ttl
                  hcaptcha:
                    type: object
                    properties:
                      enabled:
                        type: boolean
                    required:
                      - enabled
                  mail:
                    type: object
                    properties:
                      smtp:
                        type: object
                        properties:
                          host:
                            type: string
                          port:
                            type: integer
                          encrypted:
                            type: boolean
                          username:
                            type: string
                        required:
                          - host
                          - port
                          - encrypted
                          - username
                      from:
                        type: object
                        properties:
                          mail:
                            type: string
                          name:
                            type: string
                        required:
                          - mail
                          - name
                    required:
                      - smtp
                      - from
                required:
                  - root_url
                  - production
                  - database
                  - image_store
                  - token
                  - password
                  - registration_enabled
                  - email_verification
                  - hcaptcha
                  - mail
        '401':
          $ref: '#/components/responses/Unauthorized'
      operationId: get-admin-server-config
      description: Get server config
      security:
        - Token: []
        - QueryToken: []
components:
  schemas:
    User:
      title: User
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        email:
          type: string
          format: email
        name:
          type: string
          maxLength: 20
      required:
        - id
        - email
        - name
    UserFull:
      title: User with additional information
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            emailVerified:
              type: boolean
            isAdmin:
              type: boolean
            lastUpdated:
              type: integer
              minimum: 0
              description: Unix timestamp (seconds) of when the user was last modified
          required:
            - emailVerified
            - isAdmin
            - lastUpdated
    Ingredient:
      title: Ingredient
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        recipeId:
          type: integer
          minimum: 1
        name:
          type: string
          maxLength: 20
          example: Flour
        unit:
          type: string
          maxLength: 10
          nullable: true
          example: 'g'
          description: The unit used to measure this ingredient
        amount:
          type: number
          minimum: 0
          exclusiveMinimum: true
          nullable: true
          example: 100
      required:
        - id
        - recipeId
        - name
        - unit
        - amount
    Recipe:
      title: Recipe
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        public:
          type: boolean
          description: Whether the recipe is publicly visible or not
        name:
          type: string
          maxLength: 20
          example: Chocolate Cake
        description:
          type: string
          nullable: true
        category:
          type: string
          maxLength: 10
          nullable: true
          example: Dessert
        portions:
          type: integer
          nullable: true
          minimum: 1
        difficulty:
          type: integer
          nullable: true
          minimum: 0
          maximum: 4
        preparation:
          type: string
          nullable: true
          description: Descriptive explanation of the preparation-steps (in HTML format)
        preparationTime:
          type: integer
          nullable: true
          minimum: 1
          description: Preparation time in minutes
        restTime:
          type: integer
          nullable: true
          minimum: 1
          description: Rest time in minutes
        cookTime:
          type: integer
          nullable: true
          minimum: 1
          description: Cooking/baking time in minutes
        publishDate:
          type: integer
          minimum: 0
          description: Unix timestamp (seconds) of when the recipe was published
        user:
          $ref: '#/components/schemas/User'
        imagesCount:
          type: integer
          minimum: 0
          description: The amount of images available for this recipe
      required:
        - id
        - public
        - name
        - description
        - category
        - portions
        - difficulty
        - preparation
        - preparationTime
        - restTime
        - cookTime
        - publishDate
        - user
        - imagesCount
    RecipeFull:
      title: Recipe with additional information
      allOf:
        - $ref: '#/components/schemas/Recipe'
        - type: object
          properties:
            ingredients:
              type: array
              items:
                $ref: '#/components/schemas/Ingredient'
          required:
            - ingredients
    RecipeImage:
      title: Recipe-Image
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        recipeId:
          type: integer
          minimum: 1
        mimeType:
          type: string
          enum:
            - image/jpeg
            - image/png
            - image/gif
      required:
        - id
        - recipeId
        - mimeType
    JwtToken:
      title: JWT Token
      type: string
      example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjowLCJ1c2VyX3VzZXJuYW1lIjoiYWRtaW4iLCJ1c2VyX3JvbGUiOiJBRE1JTiJ9.INqBvo5b1p-2evTrolDw3bqTH12zKvUEEUMfmY4oNX4
      pattern: "^Bearer (?:\\w|[-_=])+\\.(?:\\w|[-_=])+\\.?(?:\\w|[-_.+\\/=])*$"
      description: 'The token containing user information in the payload'
    Pagination:
      title: Pagination
      type: object
      properties:
        page:
          type: integer
          minimum: 0
          description: The current page
        items_per_page:
          type: integer
          minimum: 1
          description: The items displayed per page
        total_items:
          type: integer
          minimum: 0
          description: The total amount of items found
        total_pages:
          type: integer
          minimum: 0
          description: The total amount of pages needed to display all items
      required:
        - page
        - items_per_page
        - total_items
        - total_pages
  responses:
    Unauthorized:
      description: There was no authentication provided or it was invalid
    Forbidden:
      description: The user has not the rights to perform this action
    ValidationError:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            additionalProperties:
              type: string
              description: The error message for the property (key)
  parameters:
    ItemsPerPage:
      schema:
        type: integer
        minimum: 1
      name: itemsPerPage
      in: query
      required: false
      description: How many items a single page should contain
    Page:
      schema:
        type: integer
        minimum: 0
      name: page
      in: query
      required: false
      description: The page to display (starting at 0)
    Sort:
      schema:
        type: string
      name: sort
      in: query
      required: false
      description: The property to sort by
    SortDir:
      schema:
        type: string
        enum:
          - asc
          - desc
      name: sortDir
      in: query
      required: false
      description: The direction of the sort (asc - ascending, desc - descending)
    MaxSize:
      schema:
        type: integer
      name: maxSize
      in: query
      required: false
      description: The width to scale the image to (or height if portrait)
  headers:
    xLogout:
      description: If set, the user should be logged out, since his token has expired
      schema:
        type: boolean
      required: false
  securitySchemes:
    Token:
      type: http
      scheme: bearer
    QueryToken:
      type: apiKey
      in: query
      name: token
      description: Bearer token
